[comment encoding = UTF-8/]
[module EthereumPSMtoSolidity('http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard','http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/uml2/5.0.0/Types')]

[template public EthereumPSMtoSolidity(model : Model)] 
[file (model.name.concat('.sol'), false)]
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.0 <0.8.0;
contract [model.ownedElement->filter(Class).name/] [if (model.ownedElement->filter(Class).isStereotypeApplied(Contract).superClass->notEmpty())] is [model.ownedElement->filter(Class).superClass.name/] [/if]{
[for (e : Element | model.ownedElement)]
[e./]
[let c : Class = e]
	[for (p : Property | c.ownedAttribute)]
	[p.type.name/] [p.visibility/] [p.name/] [if (p.isSetDefault())] = [p.default/] [/if];
	[/for]
	[for (cn : Class | c.ownedElement->filter(Class))]
	struct [cn.name/]{
		[for (p : Property | cn.attribute) ]
		[p.type.name/] [p.name/];
		[/for]
	}
	[/for]
	[for (en : Enumeration | c.ownedElement->filter(Enumeration))]
	enum [en.name/]{
		[for (el : EnumerationLiteral | en.ownedLiteral) separator(', ')]
			[el.name/]
		[/for]
	}
	[/for]
	[for (m : Constraint | c.ownedElement->filter(Constraint))]
	modifier [m.name/](){
		[m.specification/]
	}
	[/for]
	[for (sm : StateMachine | c.ownedBehavior->filter(StateMachine))][for (r : Region | sm.region)][for (it : Transition | r.transition)][for (x : Trigger | it.trigger)][let var : CallEvent = x.event]
	[if (r.transition.trigger.event->exists(e: Event | e.oclAsType(CallEvent).operation = var.operation)._not())]
	[for (o : Operation | c.ownedOperation)]
	[if (o.isStereotypeApplied(Event))]event[elseif (o.isStereotypeApplied(Constructor))]constructor[elseif (o.isStereotypeApplied(Function))]function[/if] [o.name/] ([for (pr : Parameter | o.ownedParameter) separator(', ') ?(not(pr.direction = ParameterDirectionKind::return))][pr.type.name/] [pr.name/][/for]) [o.visibility/] [for (mod : Constraint | o.ownedRule)] [mod.name/] [/for][if (o.ownedParameter->any(p | p.direction = ParameterDirectionKind::return)->notEmpty())]returns ([o.ownedParameter->last().type.name/])[/if] {
	[for (b : Behavior | o.method)]
		[let it : Interaction = b] [interactionFragment2Expression(it.fragment)/][/let]
		[let ob : OpaqueBehavior = b] [ob._body/][/let]
	[/for]
	}
	[/for][/if][/let][/for][/for][/for][/for]
	[stateMachinetoFunctions(c)/]
[/let]
[/for]
}[/file]
[/template]

[template public combinedFragment2Operands(cf : CombinedFragment)]
[for (io : InteractionOperand | cf.operand)]
[if (cf.interactionOperator = InteractionOperatorKind::alt)][alt2if(io)/]
[elseif (cf.interactionOperator = InteractionOperatorKind::loop)][loop2for(io, cf.ancestors(CombinedFragment)->select(a: CombinedFragment | a.interactionOperator = InteractionOperatorKind::loop)->size())/]
[elseif (cf.interactionOperator = InteractionOperatorKind::opt)][opt2if(io)/]
[/if][interactionFragment2Expression(io.fragment)/][/for][/template]

[template public interactionFragment2Expression(fragments: OrderedSet(InteractionFragment))]
[for (inf : InteractionFragment | fragments)]
[let mos : MessageOccurrenceSpecification = self]
	[if (mos.message.receiveEvent.message = mos.message.sendEvent.message)][mos(mos)/][/if]
[elselet  cf : CombinedFragment = self]
	[combinedFragment2Operands(cf)/]}
[/let][/for][/template]

[template public mos(mos: MessageOccurrenceSpecification)]
[if (mos.message.messageSort = MessageSort::reply and mos.message.receiveEvent.oclIsKindOf(Gate))]return [mos.message.name/];[elseif (mos.message.messageSort = MessageSort::createMessage and mos.message.receiveEvent = mos)][let m: MessageOccurrenceSpecification = mos.message.sendEvent][mos.covered.represents.type.name/] [mos.covered.represents.name/] [let p: Parameter = m.covered.represents][if (p.isMultivalued())][ '[' /][ ']' /][/if][/let];[/let][elseif (mos.message.messageSort = MessageSort::synchCall and mos.message.receiveEvent = mos and not(mos.message.sendEvent.oclIsKindOf(Gate)))][sm(mos.message)/][/if][/template]
[template public sm(m : Message)]
[let op : Operation = m.signature]
[if (m.argument->size() = op.ownedParameter->size())][if (op.ownedParameter->any(p | p.direction = ParameterDirectionKind::return)->notEmpty())][m.argument->last().stringValue()/] = [/if][op.name/]([for (oe : ValueSpecification | m.argument) separator(', ') ? (not(op.ownedParameter->at(m.argument->indexOf(oe)).direction = ParameterDirectionKind::return)) ][oe.stringValue()/][/for]);
[else][if (op.ownedParameter->any(p | p.direction = ParameterDirectionKind::return)->notEmpty())][op.ownedParameter->last().name/] = [/if][op.name/]([for (pr : Parameter | op.ownedParameter) separator(', ') ? (not(self.direction = ParameterDirectionKind::return)) ][pr.name/][/for]);[/if]
[else][m.name/];[/let]
[/template]
[template public alt2if(operand : InteractionOperand)]
[if (operand.precedingSiblings()->isEmpty())]if([operand.guard.specification.stringValue()/]){[elseif (operand.followingSiblings()->isEmpty())]} else {[else]} else if([operand.guard.specification.stringValue()/]){[/if][/template]
[template public loop2for(operand : InteractionOperand, int : Integer)]
[if (operand.guard.specification->notEmpty())]while ([operand.guard.specification.stringValue()/])
[elseif (operand.guard.minint->notEmpty())]for (var ['i'+int/] = 0; ['i'+int/] <([operand.guard.minint.stringValue()/]); ['i'+int/]++)
[/if]{[/template]
[template public opt2if(operand : InteractionOperand)]
if([operand.guard.specification.stringValue()/]){[/template]

[template public stateMachinetoFunctions(c : Class)]
[let sm : StateMachine = c.classifierBehavior][for (r : Region | sm.region)][for (it : Transition | r.transition)][for (x : Trigger | it.trigger)][let var : CallEvent = x.event]
function [var.operation.name/] ([for (pr : Parameter | var.operation.ownedParameter) separator(', ') ?(not(pr.direction = ParameterDirectionKind::return))][pr.type.name/] [pr.name/][/for]) [var.operation.visibility/] [for (mod : Constraint | var.operation.ownedRule)] [mod.name/] [/for][if (var.operation.ownedParameter->any(p | p.direction = ParameterDirectionKind::return)->notEmpty())]returns ([var.operation.ownedParameter->last().type.name/])[/if] {
{
[r.transition->reject(r.transition.trigger.event->exists(e: Event | e.oclAsType(CallEvent).operation = var.operation))->size()/]
[ExtendOperation(it.container.transition->select(it.container.transition.trigger.event->exists(e: Event | e.oclAsType(CallEvent).operation = var.operation)))/]
[/let][/for][/for][/for][/let]
[/template]

[template public ExtendOperation(set : Set(Transition))]
[for (it : Transition | set)]
[for (s : Trigger | it.trigger)][let c : CallEvent = s.event]
[for (var : Vertex | set.source)]
[let s : State = var]
require ([c.operation.owner.name/].state==[s.name/] [if (it.guard->notEmpty())] and [it.guard.specification/][/if] );
[elselet p : Pseudostate = var]
	[if (p.kind = PseudostateKind::junction)]
require ([for (ct : Transition | p.incoming) separator('or ')]
	([c.operation.owner.name/].state=[ct.source.name/] [if (ct.guard->notEmpty())] and [ct.guard.specification/][/if])
	[/for]);
	[elseif (p.kind = PseudostateKind::initial)][/if]
[/let]
[/for]
[for (var : Behavior | c.operation.method)]
[let ob : OpaqueBehavior = var]
[ob._body->first().substring(1, sin(ob._body->first())-1)/]
[/let]
[/for]
[for (var : Vertex | set.target)]
[if (set.target->count(Vertex) > 1)]
if ([c.operation.namespace/].state==[it.source.name/] [if (it.guard->notEmpty())] and [it.guard.specification/][/if])
[/if]
[let p : Pseudostate = var]
	[if (p.kind = PseudostateKind::junction or p.kind = PseudostateKind::choice)]
		[for (ct : Transition | p.outgoing)]
		[if (ct.precedingSiblings()->isEmpty())]if([ct.guard.specification.stringValue()/]){[elseif (ct.followingSiblings()->isEmpty())]} else {[else]} else if([ct.guard.specification.stringValue()/]){[/if]
			[if (ct.effect->notEmpty() and ct.effect.oclIsKindOf(OpaqueBehavior))] emit [ct.effect.specification/][/if]
			[if (not(ct.target=it.source))] [c.operation.owner.name/].state=[ct.target.name/][/if]
		[/for]
	[elseif (p.kind = PseudostateKind::initial)]
	[/if]
[elselet s : State = var]
	[if (it.effect->notEmpty() and it.effect.oclIsKindOf(OpaqueBehavior))] emit [it.effect.specification/][/if] 
	[if (not(it.target=it.source))]  [c.operation.owner.name/].state=[it.target.name/][/if]
[/let]
[/for]
[for (var : Behavior | c.operation.method)]
[let ob : OpaqueBehavior = var]
[ob._body->first().substring(sin(ob._body->first()))/]
[/let]
[/for]
[/let]
[/for]
[/for]
[/template]
[query public sin(arg : String) : Integer = arg.indexOf('return')/]